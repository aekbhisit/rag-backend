version: '3.8'

services:
  postgres:
    build: ./postgres
    user: "999:999"  # postgres user
    environment:
      POSTGRES_DB: rag_assistant
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    # No port exposure - internal network only
    volumes:
      - postgres17_data:/var/lib/postgresql/data
      - ./postgres/initdb:/docker-entrypoint-initdb.d:ro
      - ../../infra/import/rag_assistant.sql:/docker-entrypoint-initdb.d/rag_assistant.sql:ro
    networks:
      - rag-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/lib/postgresql/data:noexec,nosuid,size=10g
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d rag_assistant"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: rag-redis-local
    user: "999:999"  # redis user
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    # No port exposure - internal network only
    volumes:
      - redis_data:/data
    networks:
      - rag-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /data:noexec,nosuid,size=1g
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: rag-minio-local
    user: "1000:1000"  # minio user
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    # Only expose necessary ports
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - rag-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - FOWNER
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /data:noexec,nosuid,size=5g
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  rag-backend:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile
    container_name: rag-backend-local
    user: "1000:1000"  # Non-root user
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:password@postgres:5432/rag_assistant
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: rag_assistant
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # MinIO
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
      MINIO_BUCKET: rag-assistant
      MINIO_USE_SSL: false
      
      # Application
      NODE_ENV: production
      PORT: 3001
      LOG_LEVEL: info
      
      # Security
      SKIP_ADAPTERS_INIT: false
      
    ports:
      - "3002:3001"
    volumes:
      - ./data/logs:/app/logs:rw,noexec,nosuid
      - ./data/uploads:/app/uploads:rw,noexec,nosuid
      - ./data/temp:/app/temp:rw,noexec,nosuid
      # Remove host code mounts for security
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    networks:
      - rag-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/node_modules:noexec,nosuid,size=500m
    ulimits:
      nproc: 100
      nofile:
        soft: 1024
        hard: 2048
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  admin-web:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.admin-web
    container_name: rag-admin-web-local
    user: "1000:1000"  # Non-root user
    restart: unless-stopped
    environment:
      # Backend API
      NEXT_PUBLIC_API_URL: http://localhost:3002
      NEXT_PUBLIC_BACKEND_URL: http://rag-backend:3001
      NODE_ENV: production
      PORT: 3000
      NEXT_TELEMETRY_DISABLED: 1
      
    ports:
      - "3000:3000"
    volumes:
      - ./data/logs:/app/logs:rw,noexec,nosuid
      # Remove host code mounts for security
    depends_on:
      rag-backend:
        condition: service_started
    networks:
      - rag-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/node_modules:noexec,nosuid,size=500m
    ulimits:
      nproc: 50
      nofile:
        soft: 1024
        hard: 2048
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  travel-ai-bot:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.travel-ai-bot
    container_name: rag-travel-ai-bot-local
    user: "1000:1000"  # Non-root user
    restart: unless-stopped
    environment:
      # Backend API
      NEXT_PUBLIC_API_URL: http://localhost:3002
      NEXT_PUBLIC_BACKEND_URL: http://rag-backend:3001
      NEXT_PUBLIC_RAG_TENANT_ID: acc44cdb-8da5-4226-9569-1233a39f564f
      
      # RAG Client Configuration
      RAG_BASE_URL: http://rag-backend:3001
      RAG_TENANT_ID: acc44cdb-8da5-4226-9569-1233a39f564f

      # Application
      NODE_ENV: production
      PORT: 3200
      NEXT_TELEMETRY_DISABLED: 1
      
    ports:
      - "3200:3200"
    volumes:
      - ./data/logs:/app/logs:rw,noexec,nosuid
      # Remove host code mounts for security
    depends_on:
      rag-backend:
        condition: service_started
    networks:
      - rag-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/node_modules:noexec,nosuid,size=500m
    ulimits:
      nproc: 50
      nofile:
        soft: 1024
        hard: 2048
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3200/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Malware Detection Service
  malware-detector:
    image: alpine:latest
    container_name: rag-malware-detector
    user: "1000:1000"
    restart: unless-stopped
    command: >
      sh -c "
        apk add --no-cache bash curl &&
        while true; do
          for container in rag-backend-local rag-admin-web-local rag-travel-ai-bot-local; do
            if docker exec $$container ps aux 2>/dev/null | grep -E '(kdevtmpfsi|minerd|xmrig|cpuminer|ccminer|stratum)' > /dev/null; then
              echo \"ALERT: Malware detected in $$container\"
              docker stop $$container
            fi
          done
          sleep 300
        done
      "
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - rag-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M

networks:
  rag-network:
    driver: bridge
    internal: false  # Allow external access for web services
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres17_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
