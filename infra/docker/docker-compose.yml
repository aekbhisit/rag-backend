services:
  postgres:
    build: ./postgres
    environment:
      POSTGRES_DB: rag_assistant
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres17_data:/var/lib/postgresql/data
      - ./postgres/initdb:/docker-entrypoint-initdb.d:ro
      - ../../infra/import/rag_assistant.sql:/docker-entrypoint-initdb.d/rag_assistant.sql:ro
    networks:
      - rag-network

  redis:
    image: redis:7-alpine
    container_name: rag-redis-local
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # opensearch removed in favor of PostgreSQL + pgvector + PostGIS + FTS

  minio:
    image: minio/minio:latest
    container_name: rag-minio-local
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # RAG Backend Application
  rag-backend:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile
    container_name: rag-backend-local
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:password@postgres:5432/rag_assistant
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: rag_assistant
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # MinIO
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
      MINIO_BUCKET: rag-assistant
      MINIO_USE_SSL: false
      
      # Application
      NODE_ENV: development
      PORT: 3001
      LOG_LEVEL: debug
      
      # Skip adapter initialization for development (optional)
      SKIP_ADAPTERS_INIT: false
      
    ports:
      - "3002:3001"
    volumes:
      - ../../apps/backend:/app/apps/backend:ro
      - ../../packages:/app/packages:ro
      - ../../nx.json:/app/nx.json:ro
      - ../../tsconfig*.json:/app/tsconfig*.json:ro
      - ../../package*.json:/app/package*.json:ro
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Admin Web UI
  admin-web:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.admin-web
    container_name: rag-admin-web-local
    restart: unless-stopped
    environment:
      # Backend API (browser hits host; keep localhost)
      NEXT_PUBLIC_API_URL: http://localhost:3002
      NEXT_PUBLIC_BACKEND_URL: http://rag-backend:3001

      # Application
      NODE_ENV: production
      PORT: 3000

      # Development features
      NEXT_TELEMETRY_DISABLED: 1
      
    ports:
      - "3000:3000"
    volumes:
      - ../../apps/admin-web:/app/apps/admin-web:ro
      - ../../packages:/app/packages:ro
      - ../../nx.json:/app/nx.json:ro
      - ../../tsconfig*.json:/app/tsconfig*.json:ro
      - ../../package*.json:/app/package*.json:ro
    depends_on:
      - rag-backend
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Travel AI Bot Frontend
  travel-ai-bot:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.travel-ai-bot
    container_name: rag-travel-ai-bot-local
    restart: unless-stopped
    environment:
      # Backend API (browser hits host; keep localhost)
      NEXT_PUBLIC_API_URL: http://localhost:3002
      NEXT_PUBLIC_BACKEND_URL: http://rag-backend:3001
      NEXT_PUBLIC_RAG_TENANT_ID: acc44cdb-8da5-4226-9569-1233a39f564f
      
      # RAG Client Configuration
      RAG_BASE_URL: http://rag-backend:3001
      RAG_TENANT_ID: acc44cdb-8da5-4226-9569-1233a39f564f

      # Application
      NODE_ENV: production
      PORT: 3200

      # Development features
      NEXT_TELEMETRY_DISABLED: 1
      
    ports:
      - "3200:3200"
    volumes:
      - ../../apps/travel-ai-bot:/app/apps/travel-ai-bot:ro
      - ../../packages:/app/packages:ro
      - ../../nx.json:/app/nx.json:ro
      - ../../tsconfig*.json:/app/tsconfig*.json:ro
      - ../../package*.json:/app/package*.json:ro
    depends_on:
      - rag-backend
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3200/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  rag-network:
    driver: bridge

volumes:
  postgres17_data:
  redis_data:
  minio_data:


