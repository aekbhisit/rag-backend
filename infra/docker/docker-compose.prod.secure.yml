version: '3.8'

services:
  # Main RAG Backend Application
  rag-backend:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile
    container_name: rag-backend
    user: "1000:1000"  # Non-root user
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      # MinIO
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}
      # JWT
      JWT_SECRET: ${JWT_SECRET}
      # Bootstrap (optional)
      TENANT_ID: ${TENANT_ID}
      TENANT_NAME: ${TENANT_NAME}
      TENANT_CONTACT_EMAIL: ${TENANT_CONTACT_EMAIL}
      TENANT_CODE: ${TENANT_CODE}
      TENANT_SLUG: ${TENANT_SLUG}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      ADMIN_NAME: ${ADMIN_NAME}
    volumes:
      - ./data/logs:/app/logs:rw,noexec,nosuid
      - ./data/uploads:/app/uploads:rw,noexec,nosuid
      - ./data/temp:/app/temp:rw,noexec,nosuid
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    networks:
      - internal-db-network      # Database access
      - internal-cache-network   # Redis access
      - internal-storage-network # MinIO access
      - internal-app-network     # Internal API
      - public-web-network       # External API
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/node_modules:noexec,nosuid,size=500m
    ulimits:
      nproc: 100
      nofile:
        soft: 1024
        hard: 2048
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Admin Web (Next.js)
  admin-web:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.admin-web
    container_name: rag-admin-web
    user: "1000:1000"  # Non-root user
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      # Frontend will call the backend via your external Nginx on the same domain
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_BACKEND_URL: ${NEXT_PUBLIC_BACKEND_URL}
      # Tenant configuration
      TENANT_ID: ${TENANT_ID}
      NEXT_TELEMETRY_DISABLED: ${NEXT_TELEMETRY_DISABLED}
    ports:
      - "3000:3000"
    depends_on:
      rag-backend:
        condition: service_started
    networks:
      - management-network       # Admin access
      - internal-app-network     # Backend communication
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/node_modules:noexec,nosuid,size=500m
    ulimits:
      nproc: 50
      nofile:
        soft: 1024
        hard: 2048
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Travel AI Bot (Next.js)
  travel-ai-bot:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.travel-ai-bot
    container_name: rag-travel-ai-bot
    user: "1000:1000"  # Non-root user
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3200
      # Backend API connection
      NEXT_PUBLIC_BACKEND_URL: ${NEXT_PUBLIC_BACKEND_URL}
      RAG_BASE_URL: ${RAG_BASE_URL}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      # Tenant configuration
      TENANT_ID: ${TENANT_ID}
      # Next.js configuration
      NEXT_TELEMETRY_DISABLED: ${NEXT_TELEMETRY_DISABLED}
    ports:
      - "3200:3200"
    depends_on:
      rag-backend:
        condition: service_started
    networks:
      - public-web-network       # Public access
      - internal-app-network     # Backend communication
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/node_modules:noexec,nosuid,size=500m
    ulimits:
      nproc: 50
      nofile:
        soft: 1024
        hard: 2048
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3200/', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile.postgis
    container_name: rag-postgres
    user: "999:999"  # Run as postgres user, not root
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./postgres/initdb:/docker-entrypoint-initdb.d:ro
      - ./data/backups:/backups
      - ../../infra/db/security-setup.sql:/docker-entrypoint-initdb.d/security-setup.sql:ro
    # REMOVED: ports: - "5432:5432"  # No external database exposure for security
    networks:
      - internal-db-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/lib/postgresql/data:noexec,nosuid,size=10g
    ulimits:
      nproc: 100
      nofile:
        soft: 1024
        hard: 2048
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: rag-redis
    user: "999:999"  # redis user
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - ./data/redis:/data
    # REMOVED: ports: - "6379:6379"  # No external Redis exposure for security
    networks:
      - internal-cache-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /data:noexec,nosuid,size=1g
    ulimits:
      nproc: 50
      nofile:
        soft: 1024
        hard: 2048
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: rag-minio
    user: "1000:1000"  # minio user
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL}
    volumes:
      - ./data/minio:/data
    ports:
      - "9000:9000"  # MinIO API (required for external access)
      - "9001:9001"  # MinIO Console (required for admin access)
    networks:
      - internal-storage-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - FOWNER
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /data:noexec,nosuid,size=5g
    ulimits:
      nproc: 50
      nofile:
        soft: 1024
        hard: 2048
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Malware Detection Service
  malware-detector:
    image: alpine:latest
    container_name: rag-malware-detector
    user: "1000:1000"
    restart: unless-stopped
    command: >
      sh -c "
        apk add --no-cache bash curl jq &&
        echo 'Starting malware detection service...' &&
        while true; do
          echo 'Scanning for malware at $(date)'
          
          # Check for crypto miners in all containers
          for container in rag-backend rag-admin-web rag-travel-ai-bot rag-postgres rag-redis rag-minio; do
            if docker ps --format '{{.Names}}' | grep -q $$container; then
              echo \"Checking container: $$container\"
              
              # Check for known malware processes
              if docker exec $$container ps aux 2>/dev/null | grep -E '(kdevtmpfsi|minerd|xmrig|cpuminer|ccminer|stratum|LvZm9SZ|kinsing|masscan|nmap|nc|netcat)' > /dev/null; then
                echo \"ALERT: Malware detected in $$container at $(date)\"
                
                # Create incident log
                echo \"{\\\"timestamp\\\":\\\"$(date -Iseconds)\\\",\\\"container\\\":\\\"$$container\\\",\\\"incident\\\":\\\"malware_detected\\\",\\\"action\\\":\\\"container_isolated\\\"}\" >> /tmp/security-incidents.log
                
                # Isolate container
                docker stop $$container
                docker network disconnect rag-network $$container 2>/dev/null || true
                
                # Create forensic snapshot
                docker commit $$container rag-forensic-$(date +%Y%m%d-%H%M%S) || true
                
                # Send alert (if webhook configured)
                if [ ! -z \"$$SLACK_WEBHOOK_URL\" ]; then
                  curl -X POST -H 'Content-type: application/json' \\
                    --data \"{\\\"text\\\":\\\"🚨 CRITICAL: Malware detected in $$container. Container isolated for forensic analysis.\\\"}\" \\
                    $$SLACK_WEBHOOK_URL || true
                fi
              fi
              
              # Check for suspicious network connections
              if docker exec $$container netstat -an 2>/dev/null | grep -E ':(4444|5555|6666|7777|8888|9999|8080|3000|5000)' | grep ESTABLISHED > /dev/null; then
                echo \"ALERT: Suspicious network connection in $$container\"
                echo \"{\\\"timestamp\\\":\\\"$(date -Iseconds)\\\",\\\"container\\\":\\\"$$container\\\",\\\"incident\\\":\\\"suspicious_network\\\",\\\"action\\\":\\\"logged\\\"}\" >> /tmp/security-incidents.log
              fi
              
              # Check for high CPU usage (potential mining)
              cpu_usage=$$(docker stats --no-stream --format \"{{.CPUPerc}}\" $$container 2>/dev/null | sed 's/%//' | cut -d. -f1)
              if [ ! -z \"$$cpu_usage\" ] && [ \"$$cpu_usage\" -gt 80 ]; then
                echo \"ALERT: High CPU usage in $$container: $$cpu_usage%\"
                echo \"{\\\"timestamp\\\":\\\"$(date -Iseconds)\\\",\\\"container\\\":\\\"$$container\\\",\\\"incident\\\":\\\"high_cpu_usage\\\",\\\"cpu_usage\\\":\\\"$$cpu_usage%\\\",\\\"action\\\":\\\"logged\\\"}\" >> /tmp/security-incidents.log
              fi
            fi
          done
          
          sleep 300  # Check every 5 minutes
        done
      "
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/logs/security:/tmp:rw
      - ./scripts:/scripts:ro
    networks:
      - management-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
    environment:
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL:-}

volumes:
  # All data is stored in local ./data directory for easy management
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/minio

networks:
  # Database network - only database services
  internal-db-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.1.0/24
    labels:
      - "security.level=high"
      - "network.type=database"

  # Cache network - Redis and caching services
  internal-cache-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.2.0/24
    labels:
      - "security.level=high"
      - "network.type=cache"

  # Storage network - MinIO and file storage
  internal-storage-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.3.0/24
    labels:
      - "security.level=medium"
      - "network.type=storage"

  # Application network - Backend services
  internal-app-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.4.0/24
    labels:
      - "security.level=medium"
      - "network.type=application"

  # Web network - Frontend and public services
  public-web-network:
    driver: bridge
    internal: false
    ipam:
      config:
        - subnet: 172.20.5.0/24
    labels:
      - "security.level=low"
      - "network.type=web"

  # Management network - Admin and monitoring
  management-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.6.0/24
    labels:
      - "security.level=high"
      - "network.type=management"