# Single-stage build for Travel AI Bot Frontend
FROM node:20-alpine

# Install pnpm and build dependencies (combine in one layer for efficiency)
RUN npm install -g pnpm@10.14.0 && \
    apk add --no-cache dumb-init python3 make g++ && \
    apk cache clean

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy package files and workspace manifest for dependency installation
COPY package*.json ./
COPY pnpm-lock.yaml ./
COPY pnpm-workspace.yaml ./
# Copy package.json files preserving directory structure
COPY apps/travel-ai-bot/package*.json ./apps/travel-ai-bot/
COPY packages/shared/package*.json ./packages/shared/

# Install all dependencies (including dev dependencies for building)
RUN pnpm install --no-frozen-lockfile

# Copy only source code and config files needed for building
COPY apps/travel-ai-bot/src ./apps/travel-ai-bot/src
COPY apps/travel-ai-bot/public ./apps/travel-ai-bot/public
COPY apps/travel-ai-bot/next.config.js ./apps/travel-ai-bot/
COPY apps/travel-ai-bot/tailwind.config.ts ./apps/travel-ai-bot/
COPY apps/travel-ai-bot/postcss.config.mjs ./apps/travel-ai-bot/
COPY apps/travel-ai-bot/tsconfig.json ./apps/travel-ai-bot/
COPY apps/travel-ai-bot/next-env.d.ts ./apps/travel-ai-bot/
COPY packages/shared/src ./packages/shared/src
COPY packages/shared/tsconfig.json ./packages/shared/
COPY tsconfig.base.json ./

# Build shared package first, then travel-ai-bot
# Set dummy environment variables for build-time page data collection
ENV OPENAI_API_KEY=dummy_key_for_build
ENV NODE_ENV=production
RUN pnpm run build:shared && pnpm run build:travel

# Clean up: remove source files and dev dependencies, keep only built artifacts and prod deps
RUN rm -rf apps/travel-ai-bot/src \
           packages/shared/src *.tsbuildinfo apps/*/tsconfig.json \
           packages/*/tsconfig.json tsconfig.base.json \
           apps/travel-ai-bot/tailwind.config.ts apps/travel-ai-bot/postcss.config.mjs && \
    pnpm prune --prod

# Change ownership to non-root user
RUN chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3200

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3200/', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start the Next.js application using pnpm from workspace root  
CMD ["dumb-init", "sh", "-c", "cd /app && pnpm --filter realtime-examples run start"]
