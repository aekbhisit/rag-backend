RAG Backend - Complete Route List (Based on Actual Code)
========================================================

Base URL: http://localhost:3001
Application: RAG Backend (Express.js)
Domain: rag.haahii.com
Architecture: Admin routes (/api/admin/*) + Public routes (/api/*)

## Public API Routes (/api/*)
*These are public-facing API routes that can be accessed by frontend applications*

### Health & System
- GET /health
  - System health check
  - Returns database status
  - No authentication required

### Context Management (Public)
- GET /api/contexts
  - List/search contexts with filtering
  - Headers: X-Tenant-ID (required)
  - Query params: q, type, intent_scope, intent_action, category, status, page, page_size
  - Supports pagination and filtering

- GET /api/contexts/{id}
  - Get specific context by ID
  - Headers: X-Tenant-ID (required)
  - Path: id (uuid)

### RAG (Retrieval Augmented Generation) Services
- POST /api/rag/summary
  - General RAG retrieval with optional summarization
  - Headers: X-Tenant-ID (required), Content-Type: application/json
  - Body: text_query, conversation_history, simantic_query, intent_scope, intent_action, category, top_k, min_score, fulltext_weight, semantic_weight, prompt_key, prompt_params
  - Rate limited by tenant settings

- POST /api/rag/place
  - Location-aware place retrieval (type: place)
  - Combines vector + text + distance search
  - Headers: X-Tenant-ID (required), Content-Type: application/json
  - Body: text_query, lat, long, max_distance_km, distance_weight, top_k, min_score, fulltext_weight, semantic_weight

- POST /api/rag/contexts
  - RAG retrieval of contexts only (no geo)
  - Headers: X-Tenant-ID (required), Content-Type: application/json
  - Body: same structure as /api/rag/summary (without lat/long)

### Categories & Intent System (Public)
- GET /api/categories
  - List available categories
  - Headers: X-Tenant-ID (required)

- POST /api/categories
  - Create new category
  - Headers: X-Tenant-ID (required), Content-Type: application/json
  - Body: name, slug

- GET /api/intent/scopes
  - List intent scopes
  - Headers: X-Tenant-ID (required)

- POST /api/intent/scopes
  - Create intent scope
  - Headers: X-Tenant-ID (required), Content-Type: application/json
  - Body: name, slug

- GET /api/intent/actions
  - List intent actions
  - Headers: X-Tenant-ID (required)
  - Query params: scope_id

- POST /api/intent/actions
  - Create intent action
  - Headers: X-Tenant-ID (required), Content-Type: application/json
  - Body: scope_id, name, slug

### Agents (Public)
- GET /api/agents
  - List enabled agents (public fields only)
  - Headers: X-Tenant-ID (optional)
  - Returns: agent_key, name, public_description, icon, theme, is_enabled

- GET /api/agents/{agentKey}
  - Get specific agent details
  - Headers: X-Tenant-ID (optional)
  - Path: agentKey

- GET /api/agents/{agentKey}/tools
  - Get agent tools (public function schemas)
  - Headers: X-Tenant-ID (optional)
  - Path: agentKey
  - Returns: tool_key, function_name, function_description, function_parameters

- GET /api/agents/{agentKey}/prompt
  - Get agent prompt by category
  - Headers: X-Tenant-ID (optional)
  - Path: agentKey
  - Query params: category (default: base)

- GET /api/agents/{agentKey}/navigation-pages/active
  - Get active navigation pages for agent
  - Headers: X-Tenant-ID (optional)
  - Path: agentKey

### Prompts (Public)
- GET /api/prompts
  - List available prompts
  - Headers: X-Tenant-ID (optional)

- GET /api/prompts/{id}
  - Get specific prompt
  - Headers: X-Tenant-ID (optional)
  - Path: id

### API Documentation
- GET /api/docs
  - OpenAPI documentation
  - Returns OpenAPI 3.0.3 specification
  - No authentication required

### Legacy/Placeholder
- POST /api/retrieve
  - Placeholder context retrieval endpoint
  - Returns mock data
  - Headers: X-Tenant-ID (optional)

## Admin API Routes (/api/admin/*)
*These are administrative routes for managing the system*

### Agent Management
- GET /api/admin/agents
  - List all agents (admin view)
  - Headers: X-Tenant-ID (optional)
  - Returns full agent data including internal fields

- GET /api/admin/agents/{agentKey}
  - Get specific agent (admin view)
  - Headers: X-Tenant-ID (optional)
  - Path: agentKey

- POST /api/admin/agents
  - Create new agent
  - Headers: X-Tenant-ID (optional), Content-Type: application/json
  - Body: agent_key, name, public_description, default_locale, allowed_locales, transfer_settings, intention_handler_key, is_enabled, is_default, icon, theme, tenant_id

- PUT /api/admin/agents/{agentKey}
  - Update agent
  - Headers: X-Tenant-ID (optional), Content-Type: application/json
  - Path: agentKey
  - Body: partial agent data

- DELETE /api/admin/agents/{agentKey}
  - Delete agent
  - Headers: X-Tenant-ID (optional)
  - Path: agentKey

### Agent Tools Management
- GET /api/admin/agents/{agentKey}/tools
  - List agent tools (admin view)
  - Headers: X-Tenant-ID (optional)
  - Path: agentKey

- POST /api/admin/agents/{agentKey}/tools
  - Add tool to agent
  - Headers: X-Tenant-ID (optional), Content-Type: application/json
  - Path: agentKey

- PUT /api/admin/agents/{agentKey}/tools/{toolId}
  - Update agent tool
  - Headers: X-Tenant-ID (optional), Content-Type: application/json
  - Path: agentKey, toolId

- DELETE /api/admin/agents/{agentKey}/tools/{toolId}
  - Remove tool from agent
  - Headers: X-Tenant-ID (optional)
  - Path: agentKey, toolId

### Agent Prompts Management
- GET /api/admin/agents/{agentKey}/prompts
  - List agent prompts (admin view)
  - Headers: X-Tenant-ID (optional)
  - Path: agentKey

- POST /api/admin/agents/{agentKey}/prompts
  - Create agent prompt
  - Headers: X-Tenant-ID (optional), Content-Type: application/json
  - Path: agentKey

- PUT /api/admin/agents/{agentKey}/prompts/{promptId}
  - Update agent prompt
  - Headers: X-Tenant-ID (optional), Content-Type: application/json
  - Path: agentKey, promptId

### Context Management (Admin)
- GET /api/admin/contexts
  - List contexts (admin view with full data)
  - Headers: X-Tenant-ID (required)
  - Query params: q, type, intent_scope, intent_action, category, status, page, page_size

- GET /api/admin/contexts/{id}
  - Get specific context (admin view)
  - Headers: X-Tenant-ID (required)
  - Path: id (uuid)

- POST /api/admin/contexts
  - Create new context
  - Headers: X-Tenant-ID (required), Content-Type: application/json
  - Body: type, title, body, instruction, attributes, trust_level, language, status, keywords, categories, intent_scopes, intent_actions

- PUT /api/admin/contexts/{id}
  - Update context
  - Headers: X-Tenant-ID (required), Content-Type: application/json
  - Path: id (uuid)

- DELETE /api/admin/contexts/{id}
  - Delete context
  - Headers: X-Tenant-ID (required)
  - Path: id (uuid)

- POST /api/admin/contexts/import
  - Import contexts from external sources
  - Headers: X-Tenant-ID (required), Content-Type: application/json

### Intent Management (Admin)
- GET /api/admin/intents
  - List intents (admin view)
  - Headers: X-Tenant-ID (optional)

- POST /api/admin/intents
  - Create intent
  - Headers: X-Tenant-ID (optional), Content-Type: application/json

- PUT /api/admin/intents/{id}
  - Update intent
  - Headers: X-Tenant-ID (optional), Content-Type: application/json
  - Path: id

- DELETE /api/admin/intents/{id}
  - Delete intent
  - Headers: X-Tenant-ID (optional)
  - Path: id

### Intent System Management
- GET /api/admin/intent-system
  - List intent system configuration
  - Headers: X-Tenant-ID (optional)

- POST /api/admin/intent-system
  - Create intent system configuration
  - Headers: X-Tenant-ID (optional), Content-Type: application/json

- PUT /api/admin/intent-system/{id}
  - Update intent system configuration
  - Headers: X-Tenant-ID (optional), Content-Type: application/json
  - Path: id

### Categories Management (Admin)
- GET /api/admin/categories
  - List categories (admin view)
  - Headers: X-Tenant-ID (optional)

- POST /api/admin/categories
  - Create category
  - Headers: X-Tenant-ID (optional), Content-Type: application/json

- PUT /api/admin/categories/{id}
  - Update category
  - Headers: X-Tenant-ID (optional), Content-Type: application/json
  - Path: id

- DELETE /api/admin/categories/{id}
  - Delete category
  - Headers: X-Tenant-ID (optional)
  - Path: id

### Prompts Management (Admin)
- GET /api/admin/prompts
  - List prompts (admin view)
  - Headers: X-Tenant-ID (optional)

- POST /api/admin/prompts
  - Create prompt
  - Headers: X-Tenant-ID (optional), Content-Type: application/json

- PUT /api/admin/prompts/{id}
  - Update prompt
  - Headers: X-Tenant-ID (optional), Content-Type: application/json
  - Path: id

- DELETE /api/admin/prompts/{id}
  - Delete prompt
  - Headers: X-Tenant-ID (optional)
  - Path: id

### Navigation Pages Management
- GET /api/admin/navigation-pages
  - List navigation pages
  - Headers: X-Tenant-ID (optional)

- POST /api/admin/navigation-pages
  - Create navigation page
  - Headers: X-Tenant-ID (optional), Content-Type: application/json

- PUT /api/admin/navigation-pages/{id}
  - Update navigation page
  - Headers: X-Tenant-ID (optional), Content-Type: application/json
  - Path: id

- DELETE /api/admin/navigation-pages/{id}
  - Delete navigation page
  - Headers: X-Tenant-ID (optional)
  - Path: id

### User Management
- GET /api/admin/users
  - List users
  - Headers: X-Tenant-ID (optional)

- GET /api/admin/users/{id}
  - Get specific user
  - Headers: X-Tenant-ID (optional)
  - Path: id

- POST /api/admin/users
  - Create user
  - Headers: X-Tenant-ID (optional), Content-Type: application/json

- PUT /api/admin/users/{id}
  - Update user
  - Headers: X-Tenant-ID (optional), Content-Type: application/json
  - Path: id

- DELETE /api/admin/users/{id}
  - Delete user
  - Headers: X-Tenant-ID (optional)
  - Path: id

### Session Management
- GET /api/admin/sessions
  - List sessions with filtering
  - Headers: X-Tenant-ID (required)
  - Query params: page, size, user_id, status, channel, from, to, sort, order

- GET /api/admin/sessions/{id}
  - Get specific session
  - Headers: X-Tenant-ID (required)
  - Path: id

- POST /api/admin/sessions
  - Create session
  - Headers: X-Tenant-ID (required), Content-Type: application/json

- PUT /api/admin/sessions/{id}
  - Update session
  - Headers: X-Tenant-ID (required), Content-Type: application/json
  - Path: id

### Message Management
- GET /api/admin/messages
  - List messages
  - Headers: X-Tenant-ID (optional)

- GET /api/admin/messages/{id}
  - Get specific message
  - Headers: X-Tenant-ID (optional)
  - Path: id

- POST /api/admin/messages
  - Create message
  - Headers: X-Tenant-ID (optional), Content-Type: application/json

### Logs & Monitoring
- GET /api/admin/logs
  - List system logs
  - Headers: X-Tenant-ID (optional)

- GET /api/admin/error-logs
  - List error logs
  - Headers: X-Tenant-ID (optional)

- POST /api/admin/error-logs
  - Create error log entry
  - Headers: X-Tenant-ID (optional), Content-Type: application/json

- PUT /api/admin/error-logs/{id}
  - Update error log entry
  - Headers: X-Tenant-ID (optional), Content-Type: application/json
  - Path: id

### Dashboard & Analytics
- GET /api/admin/dashboard
  - Get dashboard metrics
  - Headers: X-Tenant-ID (required)
  - Query params: range (1d, 7d, 30d, 90d)

### Cost Management
- GET /api/admin/costs
  - List cost data
  - Headers: X-Tenant-ID (optional)

- GET /api/admin/ai-costs
  - List AI cost data
  - Headers: X-Tenant-ID (optional)

- GET /api/admin/ai-usage
  - List AI usage data
  - Headers: X-Tenant-ID (optional)

- GET /api/admin/ai-pricing
  - List AI pricing data
  - Headers: X-Tenant-ID (optional)

### Tenant Management
- GET /api/admin/tenants
  - List tenants
  - Headers: X-Tenant-ID (optional)

- GET /api/admin/tenants/{id}
  - Get specific tenant
  - Headers: X-Tenant-ID (optional)
  - Path: id

- POST /api/admin/tenants
  - Create tenant
  - Headers: X-Tenant-ID (optional), Content-Type: application/json

- PUT /api/admin/tenants/{id}
  - Update tenant
  - Headers: X-Tenant-ID (optional), Content-Type: application/json
  - Path: id

### Profile Management
- GET /api/admin/profiles
  - List profiles
  - Headers: X-Tenant-ID (optional)

- GET /api/admin/profiles/{id}
  - Get specific profile
  - Headers: X-Tenant-ID (optional)
  - Path: id

- POST /api/admin/profiles
  - Create profile
  - Headers: X-Tenant-ID (optional), Content-Type: application/json

- PUT /api/admin/profiles/{id}
  - Update profile
  - Headers: X-Tenant-ID (optional), Content-Type: application/json
  - Path: id

### Profile Targets Management
- GET /api/admin/profile-targets
  - List profile targets
  - Headers: X-Tenant-ID (optional)

- POST /api/admin/profile-targets
  - Create profile target
  - Headers: X-Tenant-ID (optional), Content-Type: application/json

- PUT /api/admin/profile-targets/{id}
  - Update profile target
  - Headers: X-Tenant-ID (optional), Content-Type: application/json
  - Path: id

### Overrides Management
- GET /api/admin/overrides
  - List overrides
  - Headers: X-Tenant-ID (optional)

- POST /api/admin/overrides
  - Create override
  - Headers: X-Tenant-ID (optional), Content-Type: application/json

- PUT /api/admin/overrides/{id}
  - Update override
  - Headers: X-Tenant-ID (optional), Content-Type: application/json
  - Path: id

### Settings Management
- GET /api/admin/settings
  - Get system settings
  - Headers: X-Tenant-ID (optional)

- PUT /api/admin/settings
  - Update system settings
  - Headers: X-Tenant-ID (optional), Content-Type: application/json

### Cache Management
- GET /api/admin/cache
  - Get cache status
  - Headers: X-Tenant-ID (optional)

- POST /api/admin/cache/clear
  - Clear cache
  - Headers: X-Tenant-ID (optional)

- DELETE /api/admin/cache/{key}
  - Clear specific cache key
  - Headers: X-Tenant-ID (optional)
  - Path: key

### Import/Export
- POST /api/admin/import
  - Import data
  - Headers: X-Tenant-ID (optional), Content-Type: application/json

### Authentication
- POST /api/admin/auth/login
  - Admin login
  - Headers: Content-Type: application/json

- POST /api/admin/auth/logout
  - Admin logout
  - Headers: X-Tenant-ID (optional)

- GET /api/admin/auth/me
  - Get current admin user
  - Headers: X-Tenant-ID (optional)

### Testing & Development
- GET /api/admin/agents/test
  - Test agents functionality
  - Headers: X-Tenant-ID (optional)

- POST /api/admin/agents/test
  - Run agent tests
  - Headers: X-Tenant-ID (optional), Content-Type: application/json

- GET /api/admin/tools/test
  - Test tools functionality
  - Headers: X-Tenant-ID (optional)

- POST /api/admin/tools/test
  - Run tool tests
  - Headers: X-Tenant-ID (optional), Content-Type: application/json

- GET /api/admin/requests
  - List requests (testing)
  - Headers: X-Tenant-ID (optional)

## Route Categories Summary

### Public API Routes (/api/*) - 20+ endpoints
- Health & System: 1 endpoint
- Context Management: 2 endpoints
- RAG Services: 3 endpoints
- Categories & Intent System: 6 endpoints
- Agents: 4 endpoints
- Prompts: 2 endpoints
- API Documentation: 1 endpoint
- Legacy/Placeholder: 1 endpoint

### Admin API Routes (/api/admin/*) - 80+ endpoints
- Agent Management: 8+ endpoints
- Context Management: 5+ endpoints
- Intent Management: 4+ endpoints
- Categories Management: 4+ endpoints
- Prompts Management: 4+ endpoints
- Navigation Pages: 4+ endpoints
- User Management: 5+ endpoints
- Session Management: 4+ endpoints
- Message Management: 3+ endpoints
- Logs & Monitoring: 3+ endpoints
- Dashboard & Analytics: 1+ endpoint
- Cost Management: 4+ endpoints
- Tenant Management: 4+ endpoints
- Profile Management: 4+ endpoints
- Profile Targets: 3+ endpoints
- Overrides Management: 3+ endpoints
- Settings Management: 2+ endpoints
- Cache Management: 3+ endpoints
- Import/Export: 1+ endpoint
- Authentication: 3+ endpoints
- Testing & Development: 5+ endpoints

### Total Routes: 100+

## Authentication & Headers

### Required Headers
- X-Tenant-ID: Required for most endpoints (public and admin)
- Content-Type: application/json (for POST/PUT requests)
- Authorization: Required for admin authentication

### Rate Limiting
- Public API endpoints: Tenant-aware rate limiting
- Admin endpoints: No specific rate limiting mentioned
- Rate limiter: tenantSettingsRateLimiter()

## Environment Variables
- DATABASE_URL: PostgreSQL connection string
- REDIS_URL: Redis connection string
- MINIO_ENDPOINT: MinIO storage endpoint
- MINIO_ACCESS_KEY: MinIO access key
- MINIO_SECRET_KEY: MinIO secret key
- OPENAI_API_KEY: OpenAI API key
- OPENAI_CHAT_MODEL: OpenAI chat model (default: gpt-4o-mini)

## Implementation Details
- **Framework**: Express.js with TypeScript
- **Database**: PostgreSQL with vector extensions
- **Cache**: Redis for caching
- **Storage**: MinIO for file storage
- **AI Integration**: OpenAI API integration
- **Rate Limiting**: Tenant-aware rate limiting
- **Error Handling**: Comprehensive error logging to database
- **CORS**: Enabled for all origins
- **Security**: Helmet.js for security headers

## Architecture Notes
- **Domain**: rag.haahii.com
- **Admin Routes**: /api/admin/* for administrative functions
- **Public Routes**: /api/* for public API access
- **Database**: PostgreSQL with vector search capabilities
- **Multi-tenant**: Tenant-aware with X-Tenant-ID header
- **Error Logging**: All errors logged to database with stack traces
- **Request Tracking**: Each request gets unique request ID
- **Health Monitoring**: Database health check endpoint

Generated: $(date)
