# Multi-stage build for Travel AI Bot
FROM node:20-alpine AS base

# Install pnpm and build dependencies
RUN npm install -g pnpm@10.14.0 && \
    apk add --no-cache python3 make g++ git && \
    apk cache clean

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Set build environment variables
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_OPTIONS="--max-old-space-size=4096"

# Copy package files from root and workspace
COPY package*.json ./
COPY pnpm-lock.yaml ./
COPY pnpm-workspace.yaml ./

# Copy package.json files for workspace packages
COPY packages/shared/package*.json ./packages/shared/
COPY apps/travel-ai-bot/package*.json ./apps/travel-ai-bot/

# Install all dependencies
RUN pnpm install --no-frozen-lockfile --prefer-offline

# Copy source code
COPY packages/shared/src ./packages/shared/src
COPY packages/shared/tsconfig.json ./packages/shared/
COPY apps/travel-ai-bot/src ./apps/travel-ai-bot/src
COPY apps/travel-ai-bot/public ./apps/travel-ai-bot/public
COPY apps/travel-ai-bot/next.config.js ./apps/travel-ai-bot/
COPY apps/travel-ai-bot/tailwind.config.ts ./apps/travel-ai-bot/
COPY apps/travel-ai-bot/postcss.config.mjs ./apps/travel-ai-bot/
COPY apps/travel-ai-bot/tsconfig.json ./apps/travel-ai-bot/
COPY apps/travel-ai-bot/next-env.d.ts ./apps/travel-ai-bot/
COPY apps/travel-ai-bot/eslint.config.mjs ./apps/travel-ai-bot/
COPY tsconfig.base.json ./

# Note: thaiResortGuide agent removed - using database agents only

# Set proper permissions
RUN chown -R nodejs:nodejs /app

# Build shared package first, then travel-ai-bot
RUN echo "Building shared package..." && pnpm run build:shared
RUN echo "Checking travel-ai-bot directory..." && ls -la apps/travel-ai-bot/
RUN echo "Building travel-ai-bot..." && pnpm run build:travel

# Production stage
FROM node:20-alpine AS production

# Install pnpm and runtime dependencies
RUN npm install -g pnpm@10.14.0 && \
    apk add --no-cache dumb-init && \
    apk cache clean

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Set production environment variables
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Copy package files from root and workspace
COPY package*.json ./
COPY pnpm-lock.yaml ./
COPY pnpm-workspace.yaml ./

# Copy package.json files for workspace packages
COPY packages/shared/package*.json ./packages/shared/
COPY apps/travel-ai-bot/package*.json ./apps/travel-ai-bot/

# Install production dependencies only
RUN pnpm install --prod --frozen-lockfile

# Copy built artifacts from base stage
COPY --from=base /app/packages/shared/dist ./packages/shared/dist
COPY --from=base /app/apps/travel-ai-bot/.next ./apps/travel-ai-bot/.next
COPY --from=base /app/apps/travel-ai-bot/public ./apps/travel-ai-bot/public
COPY --from=base /app/apps/travel-ai-bot/next.config.js ./apps/travel-ai-bot/

# Change ownership to non-root user
RUN chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3200

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3200/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start the application
CMD ["dumb-init", "pnpm", "--filter", "realtime-examples", "run", "start"]
